// Module Federation Type Declarations
// Generated by package-types.js

declare module 'shared_data/store' {
import { Reducer, EnhancedStore } from '@reduxjs/toolkit';
export { setSearchText, setFilter, removeFilter, clearFilters, setDateRange, setContentType } from './slices/filtersSlice';
export { selectItem, deselectItem, toggleSelection, selectAll, clearSelection, setSelectionType } from './slices/selectionSlice';
export { navigate, setBreadcrumbs, setActiveTab, goBack } from './slices/navigationSlice';
export type RootState = ReturnType<typeof createRootReducer>;
export interface DynamicStore extends EnhancedStore {
    asyncReducers: {
        [key: string]: Reducer;
    };
    injectReducer: (key: string, reducer: Reducer) => void;
    removeReducer: (key: string) => void;
}
export type AppDispatch = DynamicStore['dispatch'];
declare function createRootReducer(asyncReducers?: {}): Reducer<{
    filters: import("./slices/filtersSlice").FiltersState;
    selection: import("./slices/selectionSlice").SelectionState;
    navigation: import("./slices/navigationSlice").NavigationState;
}, import("redux").UnknownAction, Partial<{
    filters: import("./slices/filtersSlice").FiltersState | undefined;
    selection: import("./slices/selectionSlice").SelectionState | undefined;
    navigation: import("./slices/navigationSlice").NavigationState | undefined;
}>>;
export declare function createStore(preloadedState?: {}): DynamicStore;
export type { RootState as StoreState };

}

declare module 'shared_data/graphql' {
import { ApolloClient, ApolloProvider, gql } from '@apollo/client';
export declare function createApolloClient(uri?: string): ApolloClient<import("@apollo/client").NormalizedCacheObject>;
export declare const CONTENT_ITEM_FIELDS: import("@apollo/client").DocumentNode;
export declare const GET_CONTENT_ITEMS: import("@apollo/client").DocumentNode;
export { ApolloProvider, gql };
export type { ApolloClient };

}

declare module 'shared_data/context' {
export * from './PlatformContext';

}

declare module 'shared_data/events' {
export declare enum PlatformEvent {
    FILTER_CHANGED = "platform:filter:changed",
    SELECTION_CHANGED = "platform:selection:changed",
    NAVIGATION = "platform:navigation",
    ACTION_EXECUTED = "platform:action:executed",
    TAB_ACTIVATED = "platform:tab:activated",
    TAB_DEACTIVATED = "platform:tab:deactivated"
}
export interface EventPayload<T = any> {
    source: string;
    timestamp: number;
    data: T;
}
type EventHandler<T = any> = (payload: EventPayload<T>) => void;
declare class PlatformEventBus {
    private handlers;
    on<T = any>(event: PlatformEvent, handler: EventHandler<T>): () => void;
    off<T = any>(event: PlatformEvent, handler: EventHandler<T>): void;
    emit<T = any>(event: PlatformEvent, data: T, source?: string): void;
    clear(event?: PlatformEvent): void;
}
export declare const eventBus: PlatformEventBus;
export default eventBus;

}

