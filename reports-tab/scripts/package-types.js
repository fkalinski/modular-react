#!/usr/bin/env node
/**
 * Package Module Federation types for CDN distribution
 *
 * This script packages the generated TypeScript definitions into @mf-types.zip
 * which consumers can download from the CDN alongside remoteEntry.js
 *
 * Flow:
 * 1. Read generated types from node_modules/.federation/dist/
 * 2. Create module declarations matching exposes configuration
 * 3. Package into dist/@mf-types/ directory
 * 4. Create dist/@mf-types.zip for CDN upload
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const TYPES_DIR = path.join(__dirname, '../src');
const OUTPUT_DIR = path.join(__dirname, '../dist/@mf-types');
const OUTPUT_ZIP = path.join(__dirname, '../dist/@mf-types.zip');

// Module Federation exposes configuration (from webpack.config.js)
const EXPOSES = {
  './App': './src/App',
};

function ensureDir(dir) {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
}

function getTypeFilePath(sourcePath) {
  // Convert './src/App' to 'App.d.ts'
  const relativePath = sourcePath.replace('./src/', '');
  return path.join(TYPES_DIR, `${relativePath}.d.ts`);
}

function getModuleName(exposeName) {
  // Convert './App' to 'reports_tab/App'
  return `reports_tab${exposeName.replace('./', '/')}`;
}

function createModuleDeclaration(exposeName, sourcePath) {
  const typeFile = getTypeFilePath(sourcePath);

  if (!fs.existsSync(typeFile)) {
    console.warn(`⚠️  Type file not found: ${typeFile}`);
    return null;
  }

  const typeContent = fs.readFileSync(typeFile, 'utf-8');
  const moduleName = getModuleName(exposeName);

  // Wrap the type content in a module declaration
  return `declare module '${moduleName}' {\n${typeContent}\n}\n`;
}

function main() {
  console.log('📦 Packaging Module Federation types for user-tab...\n');

  // Clean output directory
  if (fs.existsSync(OUTPUT_DIR)) {
    fs.rmSync(OUTPUT_DIR, { recursive: true });
  }
  ensureDir(OUTPUT_DIR);

  // Create index.d.ts with all module declarations
  let indexContent = '// Module Federation Type Declarations\n';
  indexContent += '// Generated by package-types.js\n\n';

  let successCount = 0;
  let failCount = 0;

  Object.entries(EXPOSES).forEach(([exposeName, sourcePath]) => {
    const declaration = createModuleDeclaration(exposeName, sourcePath);
    if (declaration) {
      indexContent += declaration + '\n';
      successCount++;
      console.log(`✅ ${getModuleName(exposeName)}`);
    } else {
      failCount++;
      console.log(`❌ ${getModuleName(exposeName)} (type file not found)`);
    }
  });

  // Write index.d.ts
  const indexFile = path.join(OUTPUT_DIR, 'index.d.ts');
  fs.writeFileSync(indexFile, indexContent, 'utf-8');
  console.log(`\n📝 Created: ${indexFile}`);

  // Create zip file
  console.log('\n📦 Creating zip archive...');
  try {
    // Change to dist directory so zip contains @mf-types/ at root
    process.chdir(path.join(__dirname, '../dist'));
    execSync(`zip -r @mf-types.zip @mf-types`, { stdio: 'inherit' });
    console.log(`✅ Created: ${OUTPUT_ZIP}`);
  } catch (error) {
    console.error('❌ Failed to create zip:', error.message);
    process.exit(1);
  }

  // Summary
  console.log('\n📊 Summary:');
  console.log(`   ✅ ${successCount} modules packaged`);
  console.log(`   ❌ ${failCount} modules failed`);
  console.log(`\n✨ Types ready for CDN deployment!`);
}

main();
