// Module Federation Type Declarations
// Generated by package-types.js

declare module 'shared_components./Button' {
import React from 'react';
export interface ButtonProps {
    children: React.ReactNode;
    onClick?: () => void;
    variant?: 'primary' | 'secondary' | 'tertiary' | 'danger';
    disabled?: boolean;
    size?: 'small' | 'medium' | 'large';
}
export declare const Button: React.FC<ButtonProps>;
export default Button;

}

declare module 'shared_components./Input' {
import React from 'react';
export interface InputProps {
    value: string;
    onChange: (value: string) => void;
    placeholder?: string;
    type?: 'text' | 'email' | 'password' | 'number';
    variant?: 'default' | 'search';
    disabled?: boolean;
    label?: string;
}
export declare const Input: React.FC<InputProps>;
export default Input;

}

declare module 'shared_components./Table' {
import React from 'react';
export interface TableColumn<T> {
    key: string;
    header: string;
    render?: (item: T) => React.ReactNode;
    width?: string;
}
export interface TableProps<T> {
    columns: TableColumn<T>[];
    data: T[];
    onRowClick?: (item: T) => void;
    selectedIds?: string[];
    onSelectionChange?: (ids: string[]) => void;
    idKey?: keyof T;
    showCheckboxes?: boolean;
    showActions?: boolean;
    onActionClick?: (item: T) => void;
}
export declare function Table<T extends Record<string, any>>({ columns, data, onRowClick, selectedIds, onSelectionChange, idKey, showCheckboxes, showActions, onActionClick, }: TableProps<T>): import("react/jsx-runtime").JSX.Element;
export default Table;

}

declare module 'shared_components./Tree' {
import React from 'react';
export interface TreeNode {
    id: string;
    label: string;
    children?: TreeNode[];
    icon?: string;
    data?: any;
}
export interface TreeProps {
    nodes: TreeNode[];
    onNodeClick?: (node: TreeNode) => void;
    selectedId?: string;
}
export declare const Tree: React.FC<TreeProps>;
export default Tree;

}

declare module 'shared_components./Layout' {
import React from 'react';
export interface LayoutProps {
    children: React.ReactNode;
    direction?: 'row' | 'column';
    gap?: string;
    padding?: string;
    align?: 'start' | 'center' | 'end' | 'stretch';
    justify?: 'start' | 'center' | 'end' | 'space-between' | 'space-around';
}
export declare const Layout: React.FC<LayoutProps>;
export interface ContainerProps {
    children: React.ReactNode;
    maxWidth?: string;
    padding?: string;
}
export declare const Container: React.FC<ContainerProps>;
export interface CardProps {
    children: React.ReactNode;
    title?: string;
    padding?: string;
}
export declare const Card: React.FC<CardProps>;
declare const _default: {
    Layout: React.FC<LayoutProps>;
    Container: React.FC<ContainerProps>;
    Card: React.FC<CardProps>;
};
export default _default;

}

declare module 'shared_components./Theme' {
import React, { ReactNode } from 'react';
export interface Theme {
    colors: {
        primary: string;
        primaryHover: string;
        primaryLight: string;
        sidebarBg: string;
        sidebarText: string;
        sidebarTextMuted: string;
        sidebarHover: string;
        sidebarActive: string;
        background: string;
        surface: string;
        textPrimary: string;
        textSecondary: string;
        textMuted: string;
        border: string;
        borderLight: string;
        hover: string;
        selected: string;
        selectedBorder: string;
        secondary: string;
        danger: string;
        success: string;
        warning: string;
        text: string;
    };
    spacing: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
    typography: {
        fontFamily: string;
        fontSize: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        fontWeight: {
            regular: number;
            medium: number;
            semibold: number;
            bold: number;
        };
    };
}
export interface ThemeProviderProps {
    children: ReactNode;
    theme?: Partial<Theme>;
}
export declare const ThemeProvider: React.FC<ThemeProviderProps>;
export declare const useTheme: () => Theme;
export default ThemeProvider;

}

declare module 'shared_components./Sidebar' {
import React from 'react';
export interface SidebarItem {
    id: string;
    label: string;
    icon: React.ReactNode;
    path?: string;
    badge?: string | number;
    children?: SidebarItem[];
}
export interface SidebarProps {
    items: SidebarItem[];
    activeId?: string;
    onItemClick: (item: SidebarItem) => void;
}
export declare const Sidebar: React.FC<SidebarProps>;
export default Sidebar;

}

declare module 'shared_components./TopBar' {
import React from 'react';
export interface TopBarProps {
    searchComponent?: React.ReactNode;
    onUploadClick?: () => void;
    onNotificationsClick?: () => void;
    onUserClick?: () => void;
    userName?: string;
    notificationCount?: number;
}
export declare const TopBar: React.FC<TopBarProps>;
export default TopBar;

}

declare module 'shared_components./SearchBar' {
import React from 'react';
export interface SearchScope {
    id: string;
    label: string;
    icon?: React.ReactNode;
}
export interface SearchBarProps {
    value: string;
    onChange: (value: string) => void;
    onSearch?: (value: string) => void;
    placeholder?: string;
    scopes?: SearchScope[];
    selectedScope?: string;
    onScopeChange?: (scopeId: string) => void;
}
export declare const SearchBar: React.FC<SearchBarProps>;
export default SearchBar;

}

declare module 'shared_components./FileIcon' {
import React from 'react';
export type FileType = 'folder' | 'excel' | 'word' | 'powerpoint' | 'pdf' | 'image' | 'video' | 'audio' | 'text' | 'zip' | 'code' | 'file';
export interface FileIconProps {
    type: FileType;
    size?: number;
    isOpen?: boolean;
}
export declare const FileIcon: React.FC<FileIconProps>;
export declare const getFileTypeFromName: (filename: string) => FileType;
export default FileIcon;

}

declare module 'shared_components./ReactSingletonTest' {
import React from 'react';
/**
 * Test component to verify React singleton behavior across Module Federation boundaries
 *
 * This component should show the SAME React instance ID in all federated modules,
 * proving that React is properly shared as a singleton.
 */
export declare const ReactSingletonTest: React.FC;
export default ReactSingletonTest;

}

declare module 'shared_components./ContentPicker' {
import React from 'react';
export interface ContentLocation {
    id: string;
    name: string;
    type: 'folder' | 'hub' | 'workspace';
    icon?: string;
    children?: ContentLocation[];
    path?: string;
}
export interface ContentPickerProps {
    isOpen: boolean;
    onClose: () => void;
    onSelect: (location: ContentLocation | ContentLocation[]) => void;
    title?: string;
    locations: ContentLocation[];
    multiSelect?: boolean;
    allowedTypes?: ('folder' | 'hub' | 'workspace')[];
    selectedIds?: string[];
    searchable?: boolean;
    confirmLabel?: string;
    cancelLabel?: string;
}
/**
 * Content Picker Dialog
 *
 * A reusable dialog for selecting content locations (folders, hubs, workspaces).
 * Shared across all federated modules via Module Federation.
 *
 * @example
 * ```tsx
 * const [isPickerOpen, setIsPickerOpen] = useState(false);
 *
 * <ContentPicker
 *   isOpen={isPickerOpen}
 *   onClose={() => setIsPickerOpen(false)}
 *   onSelect={(location) => {
 *     console.log('Selected:', location);
 *     setIsPickerOpen(false);
 *   }}
 *   locations={folderTree}
 *   multiSelect={false}
 *   searchable={true}
 * />
 * ```
 */
export declare const ContentPicker: React.FC<ContentPickerProps>;
export default ContentPicker;

}

declare module 'shared_components./Breadcrumbs' {
import React from 'react';
export interface BreadcrumbItem {
    id: string;
    label: string;
    icon?: string;
    href?: string;
    onClick?: () => void;
}
export interface BreadcrumbsProps {
    items: BreadcrumbItem[];
    maxItems?: number;
    separator?: React.ReactNode;
    onItemClick?: (item: BreadcrumbItem) => void;
}
/**
 * Breadcrumbs Component
 *
 * Displays a navigation breadcrumb trail showing the user's location
 * in the application hierarchy. Works with Navigation Service for
 * cross-section navigation.
 *
 * @example
 * ```tsx
 * <Breadcrumbs
 *   items={[
 *     { id: 'home', label: 'Home', icon: '🏠' },
 *     { id: 'content', label: 'Content', icon: '📁' },
 *     { id: 'files', label: 'My Documents' },
 *   ]}
 *   onItemClick={(item) => navigateTo(item.id)}
 * />
 * ```
 */
export declare const Breadcrumbs: React.FC<BreadcrumbsProps>;
export default Breadcrumbs;

}

declare module 'shared_components./NavigationService' {
import React, { ReactNode } from 'react';
export type NavigationTarget = 'content' | 'reports' | 'user' | 'archives' | 'admin';
export interface NavigationContextValue {
    /**
     * Navigate to a specific section
     */
    navigateTo: (target: NavigationTarget, params?: Record<string, any>) => void;
    /**
     * Get current active section
     */
    currentSection: NavigationTarget;
    /**
     * Navigate back
     */
    goBack?: () => void;
    /**
     * Navigate with state
     */
    navigateWithState?: (target: NavigationTarget, state: any) => void;
}
export interface NavigationProviderProps {
    children: ReactNode;
    currentSection: NavigationTarget;
    onNavigate: (target: NavigationTarget, params?: Record<string, any>) => void;
    onGoBack?: () => void;
}
/**
 * Navigation Provider
 *
 * Provides navigation capabilities across federated modules.
 * Should be placed at the top-level shell to provide navigation
 * to all child modules.
 *
 * @example
 * ```tsx
 * <NavigationProvider
 *   currentSection={activeSection}
 *   onNavigate={(target) => setActiveSection(target)}
 * >
 *   <App />
 * </NavigationProvider>
 * ```
 */
export declare const NavigationProvider: React.FC<NavigationProviderProps>;
/**
 * useNavigation Hook
 *
 * Access navigation capabilities from any federated module.
 *
 * @example
 * ```tsx
 * const MyComponent = () => {
 *   const { navigateTo, currentSection } = useNavigation();
 *
 *   return (
 *     <button onClick={() => navigateTo('reports')}>
 *       Go to Reports
 *     </button>
 *   );
 * };
 * ```
 */
export declare const useNavigation: () => NavigationContextValue;
/**
 * Navigation Link Component
 *
 * A reusable link component that uses the navigation context.
 *
 * @example
 * ```tsx
 * <NavigationLink to="reports" style={{ color: 'blue' }}>
 *   View Reports
 * </NavigationLink>
 * ```
 */
export interface NavigationLinkProps {
    to: NavigationTarget;
    children: ReactNode;
    params?: Record<string, any>;
    style?: React.CSSProperties;
    className?: string;
    onClick?: () => void;
}
export declare const NavigationLink: React.FC<NavigationLinkProps>;
export default NavigationProvider;

}

