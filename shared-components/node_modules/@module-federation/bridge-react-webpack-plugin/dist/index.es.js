var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
import fs from "node:fs";
import path from "node:path";
class ReactBridgeAliasChangerPlugin {
  constructor(info) {
    __publicField(this, "alias");
    __publicField(this, "targetFile");
    __publicField(this, "moduleFederationOptions");
    this.moduleFederationOptions = info.moduleFederationOptions;
    this.alias = "react-router-dom$";
    this.targetFile = "@module-federation/bridge-react/dist/router.es.js";
    if (this.moduleFederationOptions.shared) {
      if (Array.isArray(this.moduleFederationOptions.shared)) {
        if (this.moduleFederationOptions.shared.includes("react-router-dom")) {
          throw Error(
            "React-router-dom cannot be set to shared after react bridge is used"
          );
        }
      } else {
        if (this.moduleFederationOptions.shared["react-router-dom"]) {
          throw Error(
            "React-router-dom cannot be set to shared after react bridge is used"
          );
        }
      }
    }
  }
  apply(compiler) {
    compiler.hooks.afterEnvironment.tap("ReactBridgeAliasPlugin", () => {
      const nodeModulesPath = path.resolve(compiler.context, "node_modules");
      const targetFilePath = path.join(nodeModulesPath, this.targetFile);
      if (fs.existsSync(targetFilePath)) {
        const originalResolve = compiler.options.resolve || {};
        const originalAlias = originalResolve.alias || {};
        const updatedAlias = { ...originalAlias, [this.alias]: targetFilePath };
        compiler.options.resolve = {
          ...originalResolve,
          alias: updatedAlias
        };
      }
    });
  }
}
export {
  ReactBridgeAliasChangerPlugin as default
};
